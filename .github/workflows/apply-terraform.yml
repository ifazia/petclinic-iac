name: Apply Terraform
run-name: Starting to apply terraform
on: 
  push:
    branches:
      - "main"       # Production
      - "staging"    # Staging
      - "dev"        # Development

jobs:
  update-infrastructure:
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      TF_VAR_DB_USERNAME:  ${{ secrets.DB_USERNAME }}
      TF_VAR_DB_PASSWORD_VET:  ${{ secrets.DB_PASSWORD_VET }}
      TF_VAR_DB_PASSWORD_VISIT:  ${{ secrets.DB_PASSWORD_VISIT }}
      TF_VAR_DB_PASSWORD_CUSTOMER:  ${{ secrets.DB_PASSWORD_CUSTOMER }}
      TF_VAR_GRAFANA_PASSWORD:  ${{ secrets.GRAFANA_PASSWORD }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -reconfigure

      - name: Select or Create Workspace
        env:
          WORKSPACE: ${{ github.ref_name }}  # Utilise le nom de la branche comme workspace
        run: |
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Check if KMS Alias exists and import
        run: |
          ALIAS_NAME="alias/eks/petclinic-eks"
          ALIAS_EXISTS=$(aws kms list-aliases --query "Aliases[?AliasName=='$ALIAS_NAME'].AliasName" --output text)

          if [ "$ALIAS_EXISTS" == "$ALIAS_NAME" ]; then
            echo "KMS Alias $ALIAS_NAME already exists. Importing into Terraform state..."
            
            # Importer l'alias dans l'état Terraform
            terraform import 'module.eks.module.kms.aws_kms_alias.this["cluster"]' "$ALIAS_NAME"
            
            # Marquer cette ressource comme gérée par Terraform sans modification
            terraform taint 'module.eks.module.kms.aws_kms_alias.this["cluster"]'
          else
            echo "KMS Alias $ALIAS_NAME does not exist. Proceeding with creation in Terraform."
          fi

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -detailed-exitcode
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
