name: Apply Terraform
run-name: Starting to apply Terraform
on: 
  push:
    branches:
      - "main"       # Production
      - "staging"    # Staging
      - "dev"        # Development

jobs:
  update-infrastructure:
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      TF_VAR_DB_USERNAME:  ${{ secrets.DB_USERNAME }}
      TF_VAR_DB_PASSWORD_VET:  ${{ secrets.DB_PASSWORD_VET }}
      TF_VAR_DB_PASSWORD_VISIT:  ${{ secrets.DB_PASSWORD_VISIT }}
      TF_VAR_DB_PASSWORD_CUSTOMER:  ${{ secrets.DB_PASSWORD_CUSTOMER }}
      TF_VAR_GRAFANA_PASSWORD:  ${{ secrets.GRAFANA_PASSWORD }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"
          terraform_wrapper: false

      # Configure AWS credentials 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: init
        run: terraform init -reconfigure

      # Set Namespace dynamically
      - name: Set Namespace
        id: set-namespace
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "NAMESPACE=production" >> $GITHUB_ENV
          else
            echo "NAMESPACE=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Select or Create Workspace
        env:
          WORKSPACE: ${{ github.ref_name }}  # Utilise le nom de la branche comme workspace
        run: |
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -detailed-exitcode -var="namespace=$NAMESPACE"
        continue-on-error: true

      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve -var="namespace=$NAMESPACE"
